name: ci

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  id-token: write    # needed for OIDC (assume-role)
  contents: read

jobs:
  build-test-analyze:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Temurin JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: 'maven'
          check-latest: true

      - name: Show Java & Maven versions (sanity)
        run: |
          echo "JAVA_HOME=$JAVA_HOME"
          which java || true
          which javac || true
          java -version
          mvn -v

      - name: Force Maven toolchain to JDK 21
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/toolchains.xml <<'XML'
          <?xml version="1.0" encoding="UTF-8"?>
          <toolchains xmlns="http://maven.apache.org/TOOLCHAINS/1.1.0"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                      xsi:schemaLocation="http://maven.apache.org/TOOLCHAINS/1.1.0 https://maven.apache.org/xsd/toolchains-1.1.0.xsd">
            <toolchain>
              <type>jdk</type>
              <provides>
                <version>21</version>
              </provides>
              <configuration>
                <jdkHome>${env.JAVA_HOME}</jdkHome>
              </configuration>
            </toolchain>
          </toolchains>
          XML
          echo "Wrote ~/.m2/toolchains.xml:"
          cat ~/.m2/toolchains.xml

      - name: Build & unit tests (Maven)
        run: mvn -B -DskipTests=false clean verify

      # ---------- SonarQube (self-hosted) ----------
      # Requires repo secrets:
      #   SONAR_HOST_URL = http://<your-sonar-ec2>:9000
      #   SONAR_TOKEN    = <My Account -> Security -> Tokens>
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v2.3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=boardgame
            -Dsonar.projectName=Boardgame

      - name: SonarQube Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # ---------- Build Docker image ----------
      - name: Build Docker image
        run: |
          IMAGE=boardgame:${{ github.sha }}
          docker build -t $IMAGE .

      # ---------- Trivy (non-blocking) ----------
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-v1

      - name: Trivy image scan (non-blocking)
        id: trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: boardgame:${{ github.sha }}
          exit-code: '0'     # never fail the job on findings
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
          ignore-unfixed: false
          format: 'table'
          output: 'trivy-image-report.txt'

      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image-report
          path: trivy-image-report.txt

      # ---------- Push image to Amazon ECR ----------
      # Provide either:
      #  - OIDC:  AWS_ROLE_TO_ASSUME, AWS_REGION, ECR_REPO, (ECR_REGISTRY optional)
      #  - or Access Keys: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION, ECR_REPO
      # Optional ECR_REGISTRY secret lets you override registry if needed.

      - name: Configure AWS credentials (OIDC role)
        if: ${{ secrets.AWS_ROLE_TO_ASSUME != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure AWS credentials (access keys)
        if: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag & Push image to ECR
        run: |
          # Resolve registry and repo
          REGISTRY="${{ steps.ecr.outputs.registry }}"
          if [ -n "${{ secrets.ECR_REGISTRY }}" ]; then
            REGISTRY="${{ secrets.ECR_REGISTRY }}"
          fi
          REPO="${{ secrets.ECR_REPO }}"
          if [ -z "$REPO" ]; then
            echo "ECR_REPO secret is required (e.g., 'boardgame')."; exit 1
          fi

          SRC="boardgame:${{ github.sha }}"
          DST_SHA="$REGISTRY/$REPO:${{ github.sha }}"
          DST_LATEST="$REGISTRY/$REPO:latest"

          docker tag "$SRC" "$DST_SHA"
          docker tag "$SRC" "$DST_LATEST"
          docker push "$DST_SHA"
          docker push "$DST_LATEST"
